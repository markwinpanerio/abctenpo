user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log warn;
pid        /var/run/nginx.pid;

# 1プロセスあたりのファイルディスクリプタの上限
# Too many open filesエラーがでてたらこいつを疑う
#️ worker_connectionsの3-4倍くらいを目安に
worker_rlimit_nofile 4096;

events {
    # 1プロセス辺りの同時接続数
    worker_connections  1024;
    #️ on だと複数の接続を同時に受けれるとか。デフォルトonだけど明示的に
    multi_accept on;
    #︎最近はデフォルトらしいけど明示的に。効率いいイベント処理方式(他にselectがある)
    use epoll;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    # ログ周りはまあお好みで。
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    # Version番号非表示
    server_tokens off;

    # sendfile()APIを利用して通信するようになる。sendfile() はカーネル内で処理を行うため高速。環境によってはoffに。
    sendfile       off;
    # sendfile利用時の通信を圧縮。sendfile on じゃないと使えない
    tcp_nopush     off;

    # ELBの後ろなら120が推奨。変更するならELBの設定とあわせよう
    keepalive_timeout  120;

    # gzip利用関連。gzipだとCPUに対する負荷がという話もあるけど、ネットワーク帯域 > CPUで考えるとしたほうがいいと思う
    gzip_static       off; # gzipするなら絶対ONで。nginxがすでに圧縮済みのgzipがある場合そいつを配信してCPUに優しくなる
    gzip              off; # gzip使うぜ宣言
    gzip_http_version 1.0; # gzip使うhttpのバージョン。1.0で問題なし
    gzip_vary         off; # http レスポンスに Vary: Accept-Encoding ヘッダを追加する。gzip使うぜ宣言のヘッダ版
    gzip_comp_level   6; #︎圧縮レベル。9が最大圧縮。どっかで6が無難てみたのでだいたい6
    # gzipにしちゃうmine type。なかったら追加使用
    gzip_types        text/plain text/xml text/css text/javascript
                      application/xhtml+xml application/xml
                      application/rss+xml application/atom_xml
                      application/javascript application/x-javascript
                      application/x-httpd-php;
    # gzip使わないUser Agent。2016年でも一応IE6以下にはgzip使わない優しさを見せよう
    gzip_disable      "MSIE [1-6]\.";

    # キャッシュのパス、レベルの指定。だいたいこれでいい
    # keys_zoneはゾーン名とゾーンサイズの指定 oneというゾーンでサイズを4Mに
    # max sizeはゾーン内のキャッシュのmaxサイズ。このサイズこれるとキャッシュが消される
    # inactive保持期間。この期間過ぎたキャッシュも消される
    fastcgi_cache_path  /var/cache/nginx levels=1:2
                      keys_zone=one:1m max_size=0m inactive=0m;
    fastcgi_temp_path   /var/tmp/nginx;
    # コネクションタイムアウトとみなす秒数。デフォルト60
    fastcgi_connect_timeout 5;
    # 転送のタイムアウトとみなす秒数。デフォルト60
    fastcgi_send_timeout 10;
    # 読み込みのタイムアウトとみなす秒数。デフォルト60。処理がクソ重いPHPとかように90
    fastcgi_read_timeout 90;
    # もしfast cgiからこの状態の返答がきて、キャッシュがあった場合キャッシュを返す指定
    fastcgi_cache_use_stale error timeout invalid_header http_500 http_503;
    # キャッシュ有効時に同一のリクエストが同時に来た場合まとめて処理するらしい。onのが高速になる模様
    fastcgi_cache_lock off;
    # この秒数まで↑の同時リクエストとみなされた場合、キャッシュができるのを待つよ
    fastcgi_cache_lock_timeout 5s;

    # ヘッダ周りを隠したり出したり
    # 主にAWSのELB使うようですね
    add_header  Host               $host;
    add_header  X-Real-IP          $remote_addr;
    add_header  X-Forwarded-Host   $host;
    add_header  X-Forwarded-Server $host;
    add_header  X-Forwarded-For    $proxy_add_x_forwarded_for;
    add_header  X-Forwarded-Proto  $http_x_forwarded_proto;

    # こいつらは隠しておいたほうがよいヘッダ
    fastcgi_hide_header X-Pingback;
    fastcgi_hide_header X-Powered-By;

    include /etc/nginx/conf.d/*.conf;
}
